import tkinter as tk
import random as random
import numpy as np
from customtkinter import *

#region CONSTANTS & VARIABLES
COLORS = {
    "text_primary": "#C56135",
    "text_secondary": "#ED9B40",
    "bg_primary": "#93B1A7",
    "bg_secondary": "#7A918D",
    "bg_tertiary": "#9AC1A2"
}

Array_Origin = np.array([
    [3,9,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,4,6,0],
    [2,0,0,0,0,0,0,0,5],
    [0,7,0,8,0,4,0,1,0],
    [0,3,0,0,2,0,0,0,0],
    [5,0,0,0,6,0,8,0,0],
    [0,1,0,7,3,0,0,2,0],
    [9,0,8,0,5,0,0,0,0],
    [0,0,0,2,0,0,0,0,0]])

CurrentBtn = None
CurrentGrid = Array_Origin.copy()

subgrid_frames = [[None] * 3 for _ in range(3)]

ArrayButton = np.empty((9, 9), dtype=object)

err_count = 0
#endregion
#region FONCTIONS

def onButtonClicked(x,y):
    global CurrentBtn, i_x, i_y
    if Array_Origin[x][y] == 0:        
        if CurrentBtn == ArrayButton[x][y]:
            for v in R_rep:
                if GetBVal(CurrentBtn) == str(v):
                    CurrentBtn.configure(fg_color = "red")
                    break
                CurrentBtn.configure(fg_color = 'white')
            CurrentBtn = None
        elif CurrentBtn != ArrayButton[x][y] and CurrentBtn != None:
            for v in R_rep:
                if GetBVal(CurrentBtn) == str(v):
                    CurrentBtn.configure(fg_color = "red")
                    break
                CurrentBtn.configure(fg_color = 'white')
            CurrentBtn = ArrayButton[x][y]
            CurrentBtn.configure(fg_color = COLORS["bg_secondary"])
            i_x, i_y = x,y
        else:
            CurrentBtn = ArrayButton[x][y]
            CurrentBtn.configure(fg_color = COLORS["bg_secondary"])
            i_x, i_y = x,y
    print(CurrentBtn)

def ChangeCellNum(event):
    if CurrentBtn != None and event.char in "0123456789":
        CurrentBtn.configure(text = event.char,text_color="blue")
        CurrentGrid[i_x][i_y] = event.char
        CheckLogic()
        print(R_rep)
        #if GetBVal(CurrentBtn) in R_rep:
            #CurrentBtn.configure(fg_color = "red")
    print(CurrentGrid)

def CheckLogic():
    row = CurrentGrid[i_x, :]
    col = CurrentGrid[:, i_y]
    if not CheckRow(row) or not CheckCol(col):
        return False
        

    return True

def CheckRow(row):
    global R_rep, R_err, err_count
    if err_count == 0:
        R_err = None
    #creer un array des indices des valeurs != 0
    AU_i = np.argwhere(row)
    print(AU_i)
    AU = np.take(row, AU_i)
    print(AU)
    AU = AU.flatten()

    #Creer un NamedTuple contenant les valeurs et le nombres d'occurences. S'il y a des valeurs répétées, les renvoie
    print(AU)
    val, count = np.unique_counts(AU)
    print(val, count)
    R_rep = val[count > 1]
    print(R_rep)
    print(R_rep.size)
   
    if R_rep.size > 0:
        err_count += 1
        R_err = True
        print(R_err, R_rep.size)
        for button in ArrayButton[i_x]:
             for v in R_rep:
                 if GetBVal(button) == str(v):
                    b_text = button.cget("text")
                    if b_text == str(v):
                        button.configure(fg_color = "red")
    elif R_err == True and R_rep.size == 0:
        print(R_err)
        for button in ArrayButton[i_x]:
            button.configure(fg_color = "white")
        R_err = False
    print(R_err)

            
    # for button in ArrayButton[i_x]:
    #     button.configure(fg_color = "white")
    
    if len(val) == 9 and not R_err:
        return True

def GetBVal(Btn):
    B_val = Btn.cget("text")
    return B_val
    
    
#endregion

root = CTk()
root.bind('<Key>',ChangeCellNum)
frame = CTkFrame(root, fg_color=COLORS["bg_tertiary"], corner_radius=4,border_width=5,width=800,height=450)
root.title("Sudoku")
frame.pack(pady=2,padx=2)

for i in range(3):
    for j in range(3):
        subgrid = CTkFrame(frame, fg_color=COLORS["bg_tertiary"], corner_radius=0)
        subgrid.grid(row=i, column=j, padx=1, pady=1) 
        subgrid_frames[i][j] = subgrid

for i in range(9):
    for j in range(9):
        parent_frame = subgrid_frames[i//3][j//3] 
        
        e = CTkButton(
            parent_frame,
            text=str(Array_Origin[i][j]) if Array_Origin[i][j] != 0 else "",
            width=50, height=50,
            font=("Arial", 16),
            fg_color="white",  
            text_color="black", 
            hover_color=COLORS["bg_secondary"], 
            border_color=COLORS["bg_primary"],
            border_width=2,
            command=lambda x=i, y=j: onButtonClicked(x, y)
        )
        
        e.grid(row=i % 3, column=j % 3)
        ArrayButton[i][j] = e

root.mainloop()

