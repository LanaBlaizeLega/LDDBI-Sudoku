import tkinter as tk
from tkinter import StringVar
from customtkinter import *
import numpy as np
import random as rnd

# === Constants ===
COLORS = {
    "text_primary": "#C56135",  # Color for empty cells (dark)
    "text_secondary": "#ED9B40",  # Color for filled cells (light)
    "bg_primary": "#93B1A7",
    "bg_secondary": "#7A918D",
    "bg_tertiary": "#9AC1A2"
}

FONTS = {
    "main": "Segoe UI",
    "secondary": "Arial"
}

# === Globals ===
grid_labels = []
precomputed_empty_cells = []
visible_mask = np.full((9, 9), False)  # Initial mask where False = empty (dark), True = filled (light)

# === Tkinter setup ===
app = CTk()
width, height = app.winfo_screenwidth(), app.winfo_screenheight()
app.geometry(f"{width}x{height}")
app.title("Kudoku Sudoku")
app.state('zoomed')

def precompute_empty_cells():
    # Create a list of all indices (i, j) for the grid
    indices = [(i, j) for i in range(9) for j in range(9)]
    # Shuffle the indices to make the empty cells random, but fixed once calculated
    rnd.shuffle(indices)
    return indices

# Generate the order of empty cells (shuffled)
precomputed_empty_cells = precompute_empty_cells()

def update_difficulty(val):
    # Map slider value (0-81) to number of empty cells
    num_empty_cells = int(val)
    apply_mask_to_grid(num_empty_cells)

def apply_mask_to_grid(n_masques):
    global visible_mask
    visible_mask = np.full((9, 9), True)  # Start by assuming all cells are filled (light)
    
    # Mark the first n_masques cells as empty (dark)
    for idx in range(n_masques):
        i, j = precomputed_empty_cells[idx]
        visible_mask[i][j] = False  # Set as empty (dark)
    
    update_grid_display()

def update_grid_display():
    # Update only the cells that need to change (i.e., become dark or light)
    for i in range(9):
        for j in range(9):
            grid_labels[i][j].configure(
                fg_color=COLORS["text_secondary"] if visible_mask[i][j] else COLORS["text_primary"]
            )

def generate_game():
    # Placeholder for game generation logic
    print("Game generated!")

def switch_theme():
    mode = light_switch_var.get()
    set_appearance_mode(mode)
    print(f"Switched to {mode} mode.")

def show_menu(menu):
    for m in Menus:
        m.pack_forget()
    menu.pack(fill="both", expand=True, padx=20, pady=20)

def load_progress(file):
    data = np.load(file)
    return data['timer'].item(), data['joueur'], data['base'], data['solution']


def save_progress(file, t, joueur, base, solution):
    np.savez(file, timer=t, joueur=joueur, base=base, solution=solution)

# === GUI Menus ===
MainMenu = CTkFrame(app)
SecondMenu = CTkFrame(app)
Menus = [MainMenu, SecondMenu]

# MainMenu Widgets
MainTitle = CTkLabel(MainMenu, text="Kudoku Sudoku", font=(FONTS["main"], height // 5), text_color=COLORS["text_secondary"])
PlayButton = CTkButton(MainMenu, text="Play", command=lambda: show_menu(SecondMenu), corner_radius=32,
                       hover_color=COLORS["text_primary"], fg_color=COLORS["text_secondary"],
                       font=(FONTS["secondary"], height // 15))
ReloadButton = CTkButton(MainMenu, text="Reload", command=lambda: print("Reload clicked"), corner_radius=32,
                         hover_color=COLORS["text_primary"], fg_color=COLORS["text_secondary"],
                         font=(FONTS["secondary"], height // 15))
light_switch_var = StringVar(value="dark")
LightSwitch = CTkSwitch(MainMenu, text="LightMode", variable=light_switch_var, onvalue="dark", offvalue="light",
                        command=switch_theme, progress_color=COLORS["text_primary"])

MainTitle.pack(side="top", fill=tk.X)
PlayButton.pack(pady=10)
ReloadButton.pack(pady=10)
LightSwitch.pack(side="bottom")

# SecondMenu Widgets
GenerateButton = CTkButton(SecondMenu, text="Generate", command=generate_game, corner_radius=32,
                           hover_color=COLORS["text_primary"], fg_color=COLORS["text_secondary"],
                           font=(FONTS["secondary"], height // 15))
BackButton = CTkButton(SecondMenu, text="Back", command=lambda: show_menu(MainMenu), corner_radius=32,
                       hover_color=COLORS["text_primary"], fg_color=COLORS["text_secondary"],
                       font=(FONTS["secondary"], height // 15))
DifficultyPanel = CTkLabel(SecondMenu, text="", font=(FONTS["main"], height // 40), text_color=COLORS["text_secondary"])
NumberOfDigitPanel = CTkLabel(SecondMenu, text="", font=(FONTS["secondary"], height // 45))
DifficultySlider = CTkSlider(SecondMenu, from_=0, to=81, command=update_difficulty, number_of_steps=81,
                             orientation='vertical', progress_color=COLORS["text_secondary"])

grid_frame = CTkFrame(SecondMenu)
for i in range(9):
    row = []
    for j in range(9):
        label = CTkLabel(grid_frame, text="", width=40, height=40, font=(FONTS["secondary"], 20),
                         corner_radius=8, fg_color=COLORS["bg_primary"])
        label.grid(row=i, column=j, padx=2, pady=2)
        row.append(label)
    grid_labels.append(row)

# Layout
BackButton.grid(row=7, column=2, columnspan=2)
GenerateButton.grid(row=5, column=2, columnspan=2)
DifficultySlider.grid(row=2, column=5, rowspan=5)
DifficultyPanel.grid(row=1, column=6, columnspan=5)
NumberOfDigitPanel.grid(row=5, column=3)
grid_frame.grid(row=3, column=6, rowspan=5, columnspan=5)

# Initial state
update_difficulty(30)
show_menu(MainMenu)

# Start Tkinter main loop
app.mainloop()
